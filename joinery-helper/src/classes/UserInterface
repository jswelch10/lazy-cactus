export default class UserInterface {
    constructor(JoineryHelper) {
        this.jh = JoineryHelper
    }
    init() {
        //this function is UI/Storage
        this.setupUI();

        chrome.storage.local.get("user").then(res => {
            this.user = res.user
        });

        this.getPageRefs();

        const setupRow = document.querySelector(".data-grid-table-row");

        //this code is needed to initialize the sidebar for a proper scan
        setupRow.click();
        this.fieldsTab.click();
        setupRow.click();
    }

    getPageRefs(){
        this.blastShieldRef = document.getElementById("jh-blast-shield");

        this.fieldsTab = document.querySelector('[aria-label="Work Order Fields"]');
        this.workflowTab = document.querySelector('[aria-label="Workflow"]');

        this.widthInputRef = document.getElementById('input_44');
        this.heightInputRef = document.getElementById('input_45');
        this.workOrderInstructionsRef = document.getElementById('input_39');
        this.saveButtonRef = document.querySelector('.work-order-form-save-popup > button');

        this.workOrderNumRef = document.querySelector("#tab-content-5 .production-info tr:nth-child(3) td:last-child");
        this.artDimensionsRef = document.querySelector(".artwork-info > div:last-of-type");

        this.workflowTab.click();
    }
    setupUI(){
        //stops text input and drag feature from fighting
        document.getElementById('jh-excluded').onmousedown = (e) => e.stopPropagation();

        //catch when settings are changed, so we don't read before every action
        //const func = this.appStateChanged
        const func = this.jh.appStateChanged
        
        Array.from(document.querySelectorAll("#JoineryHelper input")).forEach( item => {
            item.onchange = func.bind(this);
        });


        this.syncUI();
        this.makeUIDraggable();
    }
    syncUI() {
        //below code syncs up tabs with their content
        const names = [
            "scan",
            "fix",
            "dar",
            "red-flags",
            "report",
            "settings"
        ];
        const tabs = Array.from(document.getElementsByClassName('jh-tab-btn'));
        const contents = Array.from(document.getElementsByClassName('jh-tab-content'));

        names.forEach(name => {

            const tab = document.getElementById(`jh-${name}-tab`);
            const content = document.getElementById(`jh-${name}-content`);

            tab.addEventListener("click", () => {
                if(tab.classList.contains('active')) return

                tabs.forEach(item => item.classList.remove("active"));
                contents.forEach(item => item.classList.remove("selected"));

                tab.classList.add("active");
                content.classList.add("selected");

            })
        });

        //connects buttons to class functions

        const btnArr = [
            ['scan', this.scan],
            ['fix', this.fixMeasurements],
            ['star', this.flagHandler],
            ['dar', this.completeDigitalArtReview],
            ['cancel', this.cancel],
            ['reset', this.reset],
            ['report', this.report],
            ['clear', this.clearStorage]
        ];

        btnArr.forEach( ([btnName, func]) => {
            const btn = document.getElementById(`jh-${btnName}Btn`)

            btn.onclick = func.bind(this);
        })

    }
    makeUIDraggable() {
        // Make the DIV element draggable:
        dragElement(document.getElementById('JoineryHelper'));

        function dragElement(elmnt) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            elmnt.onmousedown = dragMouseDown;

            function dragMouseDown(e) {
                e.preventDefault();
                // get the mouse cursor position at startup:
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                // call a function whenever the cursor moves:
                document.onmousemove = elementDrag;
            }

            function elementDrag(e) {
                e.preventDefault();
                // calculate the new cursor position:
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // set the element's new position:
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
            }

            function closeDragElement() {
                // stop moving when mouse button is released:
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
    }

    changeRowColor(rowEl, setting) {
        switch(setting) {
            case 'no-change':
            case 'success':
                rowEl.style.backgroundColor = 'lime';
                break;
            case 'need-change':
                rowEl.style.backgroundColor = 'yellow';
                break;
            case 'flagged':
                rowEl.style.backgroundColor = 'orange';
                break;
            case 'flagged-no-change':
                rowEl.style.backgroundColor = 'lightpink';
                break;
            case 'flagged-need-change':
                rowEl.style.backgroundColor = 'lightcoral';
                break;
            case 'skip':
            case 'error':
            default:
                rowEl.style.backgroundColor = 'black';
                rowEl.style.color = 'white';
        }
    }

    toggleBlastShield() {
        if (this.appState.debugMode) console.log('blast shield toggled', this.blastShieldRef);
        this.appState.blastShield = !this.appState.blastShield
        this.blastShieldRef.classList.toggle("active");
        document.getElementById("jh-in-progress-content").classList.toggle("active")
        document.querySelector(".jh-content .selected").classList.toggle("loading");
    }

    getRows(state, tab) {
        //TODO rework to take target settings into account
        // tabs: scan, fix, flags, dar
        const allRows = Array.from(document.querySelectorAll(".data-grid-table-row"));
        const selectedRows = allRows.filter(row => row.querySelector('.md-checked'));
        const rowsEqual = allRows.length === selectedRows.length;
        const checkAll = document.querySelector('.data-grid-header md-checkbox');

        let rows
        switch(tab) {
            case "scan" :
                // sets rows to [rowElement, ...]
                if(state.scanSettings.target === 'all') {
                    rows = allRows;
                } else {
                    rows = selectedRows
                }
                break;

            case "fix" :
                // sets rows to [{data}, ...]
                if(state.fixSettings.target === 'yellows') {

                    if (this.appState.debugMode) console.log("to be fixed log: ", state.toBeFixedLog);

                    rows = [...state.toBeFixedLog].filter(data => !data.isMessageFlagged);

                    if (this.appState.debugMode) console.log("sending these to the job Interval: ", rows);

                } else {
                    if (this.appState.debugMode) console.log("fixing selected items");
                    let arr = [];

                    [...selectedRows].forEach(row =>
                        arr.push(state.toBeFixedLog.find(data => data.workOrderNum === row.dataset.workorderNum))
                    );
                    rows = arr.filter(item => item !== undefined);
                    if (this.appState.debugMode) console.log("selected items arr: ", rows);

                }
                break;

            case "flags" :
                rows = selectedRows.map(row => {
                    return {row}
                });
                break;

            case "dar" :
                // sets rows to [{data}, ...] or [{row}, ...]
                if(state.darSettings.target === 'greens') {
                    rows = [...state.toBeDARedLog]
                    if (this.appState.debugMode) console.log("green items arr: ", rows);
                } else {
                    rows = selectedRows.map(row => {
                        return {row};
                    });

                }
                break;

        }
        checkAll.click();
        if (!rowsEqual) checkAll.click();


        if (rows.length !== 0) return rows;
        return [];

    }

    updateState() {
        /* TODO:
        * 	 alter single settings on change to reduce queries
        *    excludedWorkOrders needs a more robust string manipulation to handle user errors
        * 	 work this in at start of each job perhaps by reworking jobInterval function
        * */
        if (this.appState.debugMode) console.log("updating state");
        this.appState = {
            ...this.appState,
            "scanSettings": {
                "target": document.querySelector("input[name='radio-scan']:checked").value,
                "excludedWorkOrders": [...document.getElementById('jh-excluded').value.split(' ')],
            },
            "fixSettings": {
                "target": document.querySelector("input[name='radio-fix']:checked").value
            },
            "darSettings": {
                "target": document.querySelector("input[name='radio-fix']:checked").value
            },
            "debugMode": document.querySelector("input[name='jh-debug']").value
        }


        if (this.appState.debugMode) console.log("app state after update: ", this.appState);
    }

    async reset() {
        const tableGridRows = document.querySelectorAll(".data-grid-table-row");
        tableGridRows.forEach(row =>{
            row.style.removeProperty('background-color');
            row.style.removeProperty('color');
        });
        this.appState.toBeFixedLog = [];
        this.appState.toBeDARedLog = [];
        this.appState.changeLog = [];

    }
}